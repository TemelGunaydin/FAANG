class Solution {
    // Function to find the perimeter of the island in the grid
    func islandPerimeter(_ grid: [[Int]]) -> Int {
        let rows = grid.count
        let cols = grid[0].count
        var visited = Array(repeating: Array(repeating: false, count: cols), count: rows)

        for i in 0..<rows {
            for j in 0..<cols {
                // Only if the cell is a land and not visited
                if grid[i][j] == 1 && !visited[i][j] {
                    return isLandPerimeterDFS(grid, &visited, i, j)
                }
            }
        }
        
        return 0
    }
    
    // DFS function to calculate perimeter of the island
    func isLandPerimeterDFS(_ matrix: [[Int]], _ visited: inout [[Bool]], _ x: Int, _ y: Int) -> Int {
        let rows = matrix.count
        let cols = matrix[0].count
        
        // Check if we are outside the grid boundary
        if x < 0 || x >= rows || y < 0 || y >= cols {
            return 1 // Count boundary as part of the perimeter
        }
        
        // If it's a water cell
        if matrix[x][y] == 0 {
            return 1 // Count the land-water edge as part of the perimeter
        }
        
        // If already visited
        if visited[x][y] {
            return 0 // No need to count this again
        }
        
        visited[x][y] = true // Mark this cell as visited
        
        var edgeCount = 0
        
        // Visit all four neighbors (down, up, right, left)
        edgeCount += isLandPerimeterDFS(matrix, &visited, x + 1, y)  // Down
        edgeCount += isLandPerimeterDFS(matrix, &visited, x - 1, y)  // Up
        edgeCount += isLandPerimeterDFS(matrix, &visited, x, y + 1)  // Right
        edgeCount += isLandPerimeterDFS(matrix, &visited, x, y - 1)  // Left
        
        return edgeCount
    }
}

